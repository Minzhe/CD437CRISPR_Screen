}
effect <- 1-(1-ratio*doseRes2[index[2]])*(1-(1-ratio)*doseRes1[index[2]])*(1-doseRes1[index[1]])
effect <- effect-(1-(1-doseRes1[index[1]])*(1-doseRes1[index[2]]))
res[k,c(1,8)] <- round(c(ratio,effect),5)
if(k==1) rownames(resIC20)[i] <- drugComb
} # for
resIC20[i,] <- colMeans(res)
} # for
genename <- IC20Diff$Gene; drugname <- colnames(IC20Diff)[-1]
entre.id <- sapply(mget(genename,org.Hs.egSYMBOL2EG,ifnotfound=NA),"[[",1)
kegg.id <- translateGeneID2KEGGID(entre.id, organism="hsa")
idx <- kegg.id%in%colnames(CGP.mat)
IC20Data <- data.frame(IC20Diff[idx,-1])
rownames(IC20Data) <- kegg.id[idx]
K <- length(doseRes1); fold <- fold-0.01
P <- nrow(IC20Data) # number of drugs and genes,respectively
############################
##  Analysis
############################
Comb <- combn(K,2)
crt <- c("Similarity","mPostive","mNegative","mFalse","iPostive","iNegative","iFalse","Score")
resIC20 <- matrix(Inf,nrow=ncol(Comb),ncol=length(crt))
colnames(resIC20) <- crt; rownames(resIC20) <- 1:ncol(Comb)
for(i in 1:ncol(Comb)){
res <- matrix(Inf,nrow=2,ncol=length(crt))
for(k in 1:2){
if(k==1) index <- Comb[,i]
if(k==2) index <- rev(Comb[,i])
drugComb <- paste(drugname[index[1]],drugname[index[2]],sep="&")
sDrug <- as.matrix(IC20Data[,index])
sDrug <- sDrug[order(rownames(sDrug)),]
sDrug[sDrug>fold]=1; sDrug[sDrug< -fold]=-1
sDrug[abs(sDrug)<=fold]=0
### marginal relationships
mPos <- sum(rowSums(sDrug)==2)
mNeg <- sum(rowSums(sDrug)==-2)
mNon <- sum(apply(sDrug,1,prod)==-1)
mSim <- mPos + mNeg - mNon
res[k,c(2,3,4)] <- c(mPos,mNeg,mNon)
### interaction relationships
idx <- rownames(GP.mat)%in%rownames(sDrug)
tmp.mat <- GP.mat[idx,idx]
sGP.mat <- tmp.mat[order(rownames(tmp.mat)),order(rownames(tmp.mat))]
if(dim(sGP.mat)[1]!=dim(sDrug)[1]){
#cat("The drug puturbed genes are not exactly matched in the GP pathways","\n")
tmp <- sDrug[rownames(sDrug)%in%rownames(sGP.mat),]
sDrug <- tmp[order(rownames(tmp)),]
}
drug1 <- sDrug[,1]
drug2 <- sDrug[,2]
int.mat <- outer(drug1,drug2,FUN="*")
diag(sGP.mat) <- diag(int.mat) <- 0
iPos <- sum((sGP.mat+int.mat==2))
iNeg <- sum((sGP.mat+int.mat==-2))
iNon <- sum((sGP.mat*int.mat==-1))
#iSim <- iPos + iNeg  - iNon
iSim <- iPos + iNeg
res[k,c(5,6,7)] <- c(iPos,iNeg,iNon)
### calculate the ratio
denom <- sum(abs(drug2)>0)
if(denom>0){
ratio <- (mSim + iSim) / denom
drugComb <- paste(drugname[index[1]],drugname[index[2]],sep="&")
sDrug <- as.matrix(IC20Data[,index])
ratio <- ratio*sum(max(sDrug))
} else{ ratio=0 }
if(ratio==0){ # control tied similarities
ratio=0.01
drugComb <- paste(drugname[index[1]],drugname[index[2]],sep="&")
sDrug <- as.matrix(IC20Data[,index])
ratio <- ratio*sum(max(sDrug))
}
effect <- 1-(1-ratio*doseRes2[index[2]])*(1-(1-ratio)*doseRes1[index[2]])*(1-doseRes1[index[1]])
effect <- effect-(1-(1-doseRes1[index[1]])*(1-doseRes1[index[2]]))
res[k,c(1,8)] <- round(c(ratio,effect),5)
if(k==1) rownames(resIC20)[i] <- drugComb
} # for
resIC20[i,] <- colMeans(res)
}
View(resIC20)
score <- data.frame(rownames(resIC20),resIC20[,c(1,8)])
View(score)
colnames(score)<-c("X","ratio","scores")
rownames(score)=NULL
View(score)
tmp <- score$scores
Rank <- data.frame(score$X,rank(x=-tmp))
View(Rank)
colnames(Rank) <- c("drugpair_pred","rank"); rownames(Rank) <- NULL
View(Rank)
tmp <- as.vector(Rank[,1]);
tmp <- gsub(pattern="H-7, Dihydrochloride",replacement="H-7",fixed=T,x=tmp)
tmp <- gsub(pattern="Doxorubicin hydrochloride",replacement="Doxorubicin",fixed=T,x=tmp)
Rank[,1] <- tmp
View(Rank)
View(resIC20)
nba <- read.csv("http://datasets.flowingdata.com/ppg2008.csv")
View(nba)
nba$Name <- with(nba, reorder(Name, PTS))
View(nba)
nba.m <- melt(nba)
library(reshape2)
nba.m <- melt(nba)
View(nba.m)
nba.m <- ddply(nba.m, .(variable), transform,
+     rescale = rescale(value))
nba.m <- ddply(nba.m, .(variable), transform, rescale = rescale(value))
library(dplyr)
library(plyr)
nba.m <- ddply(nba.m, .(variable), transform, rescale = rescale(value))
library(scales)
nba.m <- ddply(nba.m, .(variable), transform, rescale = rescale(value))
View(nba.m)
View(nba)
View(nba.m)
p <- ggplot(nba.m, aes(variable, Name)) + geom_tile(aes(fill = rescale), colour = "white") + scale_fill_gradient(low = "white", high = "steelblue")
library(ggplot2)
library(ggplot2)
p <- ggplot(nba.m, aes(variable, Name)) + geom_tile(aes(fill = rescale), colour = "white") + scale_fill_gradient(low = "white", high = "steelblue")
print(p)
View(nba.m)
View(nba)
rev(1:7)
prod(1:7)
7*6*5*4*3*2
tryCatch(1, finally = print("Hello"))
stop(e)
e <- simpleError("test error")
e
stop(e)
tryCatch(stop(e), finally = print("Hello"))
tryCatch(stop("fred"), finally = print("Hello"))
tryCatch(stop(e), error = function(e) e, finally = print("Hello"))
library(aaa)
tryCatch(library(aaa), error = 1)
tryCatch(library(aaa), error = return(0))
tryCatch(library(aaa), error = function(err) return(0))
suppressWarnings(library(preprocessCore),
library(org.Hs.eg.db),
library(KEGGgraph),
library(ggplot2),
library(grid))
suppressWarnings(library(preprocessCore))
load("~/Project/Drug_combination/Algorithm/data/glassoNet05.Rdata")
View(mCGP.mat)
View(CGP.mat)
View(cov.mat)
dim(cov.mat)
dim(GP.mat)
dim(CGP.mat)
dim(mCGP.mat)
View(expr.data)
View(cov.mat)
load("~/Project/Drug_combination/Algorithm/data/res-glassoNet05-tun.Rdata")
View(mCGP.mat)
View(mGP.mat)
save(mCGP.mat, mGP.mat, file = "Project/Drug_combination/Algorithm/data/gLassoGeneNet.Rdata")
round(1, 2)
round(1, 3)
formatC(1, 3)
formatC(1, width = 3, flag = "0")
1ï¼š10
print(1:10)
library(ggplot2)
library(datasets)
data("mpg")
View(mpg)
ggplot(mpg, aes(cty, hwy)) + geom_point()
ggplot(mpg, aes(cty, hwy)) + geom_point(color = drv)
ggplot(mpg, aes(cty, hwy)) + geom_point(aes(colour = drv))
p <- ggplot(mpg, aes(cty, hwy)) + geom_point(aes(colour = drv))
ggsave(p, filename = "My Music", width = 8, height = 7)
ggsave(print(p), filename = "My Music", width = 8, height = 7)
print(p)
ggsave(p, filename = "My Music/plot.jpeg", width = 8, height = 7)
getwd()
library(devtools)
install_github("DIGREsyn", "Minzhe")
install_github("DIGREsyn", "Minzhe")
library(DIGREsyn)
doseRes <- readDoseRes.csv("Project/Drug_combination/WebApp/data/doseRes001.csv")
geneExp <- profileGeneExp("Project/Drug_combination/WebApp/data/GeneExpr001.csv")
res <- DIGREscore(geneExpDiff = geneExp$geneExp.max, doseRes = doseRes, pathway = "KEGG", fold = 0.6)
View(res$scoreRank)
View(res$rawTable)
res2 <- DIGREscore(geneExpDiff = geneExp$geneExp.max, doseRes = doseRes, pathway = "GeneNet", fold = 0.6)
View(res2$rawTable)
?DIGREscore
load("~/Project/Drug_combination/Algorithm/data/res-marNet-tun.Rdata")
dim(mCGP.mat)
dim(mGP.mat)
load("~/Project/Drug_combination/Algorithm/data/res-glassoNet05-tun.Rdata")
dim(mGP.mat)
dim(mCGP.mat)
load("~/Project/Drug_combination/Algorithm/data/glassoNet05.Rdata")
dim(mCGP.mat)
sum(abs(mCGP.mat))
load("~/Project/Drug_combination/Algorithm/data/glassoNet05.Rdata")
load("~/Project/Drug_combination/Algorithm/data/IC20ave24Diff.Rdata")
nlam=50; P <- dim(sExpr.data)
p.ary <- (wi.path[,,1:nlam]!=0)*1
rm(wi.path,w.path,wi,w,expr.data)
nlam <- dim(p.ary)[3]
geneid <- colnames(sExpr.data)
fold=0.6
j=20 # optimal lambda
mGP.mat <- p.ary[,,j]
colnames(mGP.mat) <- rownames(mGP.mat) <- geneid
sps <- sum(abs(mGP.mat))/2
sum(abs(mCGP.mat))
sum(abs(mGP.mat))
dim(mGP.mat)
sum((mGP.mat))
save(mGP.mat, mCGP.mat, file = "Project/Drug_combination/WebApp/data/gLassoGeneNet.mod.Rdata")
library(DIGREsyn)
library(DIGREsyn, help = "DIGREsyn")
?DIGREsyn
help(DIGREsyn)
pchisq(4, 29, 19)
pchisq(2, 29, 19)
pchisq(1, 29, 19)
pchisq(20, 29, 19)
pchisq(40, 29, 19)
x <- seq(0, 100, 0.5)
plot(x, dchisq(x, 29, 19))
plot(x, dchisq(x, 29, 29))
plot(x, dchisq(x, 19, 19))
plot(x, df(x, 19, 19))
x <- seq(0, 5, 0.1)
plot(x, df(x, 29, 19))
pf(4, 29, 19)
pf(4, 29, 19) + pf(0.25, 29, 19)
pf(1/4, 29, 19)
pf(1/4, 29, 19, lower.tail = FALSE)
pf(4, 29, 19, lower.tail = FALSE)
pf(0.25, 29, 19)
pf(1, 29, 19)
pf(1, 29, 29)
plot(x, df(x, 29, 29))
pf(0.25, 29, 19)
pf(4, 19, 29, lower.tail = FALSE)
load("~/Project/Drug_combination/WebApp/data/pathInfo.Rdata")
View(CGP.mat)
CGP.mat[100,100]
row.names(CGP.mat[100,100])
row.names(CGP.mat)
interact.CGP.mat <- c("source", "target")
for (i in 1:nrow(CGP.mat)) {
for (j in 1:ncol(CGP.mat)) {
if (CGP.mat[i,j] != 0) {
temp.interact <- c(row.names(CGP.mat)[i], colnames(CGP.mat)[j])
interact.mat <- rbind(interact.mat, temp.interact)
}
}
}
interact.CGP.mat <- c("source", "target")
for (i in 1:nrow(CGP.mat)) {
for (j in 1:ncol(CGP.mat)) {
if (CGP.mat[i,j] != 0) {
temp.interact <- c(row.names(CGP.mat)[i], colnames(CGP.mat)[j])
interact.mat <- rbind(interact.CGP.mat, temp.interact)
}
}
}
View(interact.mat)
sum(CGP.mat)
cbind(interact.CGP.mat, c("1", "2"))
rbind(interact.CGP.mat, c("1", "2"))
interact.CGP.mat <- c("source", "target")
for (i in 1:nrow(CGP.mat)) {
for (j in 1:ncol(CGP.mat)) {
if (CGP.mat[i,j] != 0) {
temp.interact <- c(row.names(CGP.mat)[i], colnames(CGP.mat)[j])
interact.CGP.mat <- rbind(interact.CGP.mat, temp.interact)
}
}
}
View(interact.CGP.mat)
class(interact.CGP.mat)
colnames(interact.CGP.mat) <- c("source", "target")
View(interact.CGP.mat)
interact.CGP.mat <- interact.CGP.mat[-1,]
View(interact.CGP.mat)
row.names(interact.CGP.mat) <- NULL
View(interact.CGP.mat)
write.table(interact.CGP.mat, "~/Project/Drug_combination/WebApp/data/KEGG.CGP.net.txt", sep = "\t")
write.table(interact.CGP.mat, "~/Project/Drug_combination/WebApp/data/KEGG.CGP.net.txt", sep = "\t", row.names = FALSE)
a <- c(5, 2, 3, 4)
b <- c(4, 1, 4, 2)
c <- c(3, 4, 6, 8)
A <- cbind(a, b, c)
A
library(preprocessCore)
normalize.quantiles(A)
A1 <- normalize.quantiles(A)
A1
normalize.quantiles(A1)
dat1 = data.frame(x=rnorm(1000, 100, 10), group="A")
View(dat1)
dat2 = data.frame(x=rnorm(2000, 120, 20), group="B")
dat = rbind(dat1, dat2)
View(dat)
a <- 1:5
b <- 5:1
a/b
x <- matrix(1:100, 10, 10)
x
x[x > 50]
all(1, 1, 0)
any(1, 1, 0)
all(1, 1, 1)
c(1, 1, 1) & c(0, 1, 1)
c(1, 1, 1) & c(0, 1, 1) & c(1, 1, 0)
NA %in% NA
load("~/Project/Drug_combination/Algorithm/data/res-marNet-tun.Rdata")
View(Result)
class(Result)
plot(Result["C-index"])
summary(Result["C-index"])
summary(Result[,"C-index"])
plot(Result[,"C-index"])
fold ,- 0.6
fold <- 0.6
Cut <- 0.63
mGP.mat <- cov.mat
mGP.mat[abs(cov.mat)<Cut]=0
mGP.mat[mGP.mat>0]=1
mGP.mat[mGP.mat<0]=-1
diag(mGP.mat)=0
sps <- sum(abs(mGP.mat))/2
dim(mGP.mat)
dim(mCGP.mat)
sum(mCGP.mat == 1)
sum(mCGP.mat == -1)
sum(mGP.mat == -1)
sum(mGP.mat == 1)
save(mCGP.mat, mGP.mat, file = "Project/Drug_combination/WebApp/data/marGeneNet-tun.Rdata")
View(scoring.fun)
net.scoring.fun(IC20Diff=IC20.Max,doseRes1=doseRes1,doseRes2=doseRes2,
CGP.mat=mCGP.mat,GP.mat=mGP.mat,fold=fold,path=path)
x <- 1:100
shapiro.test(x)
y <- 1:10
shapiro.test(y)
qqnorm(y)
qqline(y)
qqplot(y)
qqnorm(y)
qqline(y)
rbinom(15, 5, 0.6)
rnorm(10)
a <- shapiro.test(x)
a
str(a)
a$statistic
shapiro.test(rnorm(100))
source('~/.active-rstudio-document')
plot.shapiro(92, 10000)
source('~/.active-rstudio-document')
hist(plot.shapiro(92, 10000))
source('~/.active-rstudio-document')
hist(plot.shapiro(92, 10000))
w <- plot.shapiro(92, 10000)
plot(density(w))
plot(density(plot.shapiro(50, 10000)))
plot(density(plot.shapiro(20, 10000)))
load("~/Project/Drug_combination/WebApp/data/geneExp.Rdata")
source('~/Project/Drug_combination/WebApp/code/scoring.R')
load("~/Project/Drug_combination/WebApp/data/geneExp.Rdata")
load("~/Project/Drug_combination/WebApp/data/DREAM.processed.RData")
View(doseRes)
doseRes1
doseRes2
save(geneExp.max, geneExp.mean, geneExp.min, doseRes, file = "Project/Drug_combination/WebApp/data/geneExp.Rdata")
load("~/Project/Drug_combination/WebApp/data/geneExp.Rdata")
source('~/Project/Drug_combination/WebApp/code/scoring.R')
load("~/Project/Drug_combination/WebApp/data/pathInfo.Rdata")
res.KEGG <- scoring(geneExpDiff = geneExp.max, doseRes = doseRes, CGP.mat = CGP.mat, GP.mat = GP.mat)
source('~/Project/Drug_combination/WebApp/code/pcIndex.R')
load("~/Project/Drug_combination/WebApp/data/goldStandard.RData")
pcIndex(gStd.data = gStd.data, predRank.data = res.KEGG$scoreRank)
rm(CGP.mat, GP.mat)
load("~/Project/Drug_combination/WebApp/data/marGeneNet.Rdata")
res.mar <- scoring(geneExpDiff = geneExp.max, doseRes = doseRes, CGP.mat = mCGP.mat, GP.mat = mGP.mat)
pcIndex(gStd.data = gStd.data, predRank.data = res.mar$scoreRank)
rm(mCGP.mat, mGP.mat)
load("~/Project/Drug_combination/WebApp/data/gLassoGeneNet.Rdata")
res.par <- scoring(geneExpDiff = geneExp.max, doseRes = doseRes, CGP.mat = mCGP.mat, GP.mat = mGP.mat)
pcIndex(gStd.data = gStd.data, predRank.data = res.par$scoreRank)
source('~/Project/Drug_combination/WebApp/code/scoring.R')
source('~/Project/Drug_combination/WebApp/code/pcIndex.R')
load("~/Project/Drug_combination/WebApp/data/DREAM.processed.RData")
load("~/Project/Drug_combination/WebApp/data/pathInfo.Rdata")
load("~/Project/Drug_combination/WebApp/data/marGeneNet.Rdata")
res.mar <- scoring(geneExpDiff = IC20.Max, doseRes = doseRes, CGP.mat = CGP.mat, GP.mat = mGP.mat, fold = 0.61)
load("~/Project/Drug_combination/WebApp/data/goldStandard.RData")
pcIndex(gStd.data = gStd.data, predRank.data = res.mar$scoreRank)
res.mar.raw <- scoring(geneExpDiff = IC20.Max, doseRes = doseRes, CGP.mat = mCGP.mat, GP.mat = mGP.mat, fold = 0.61)
pcIndex(gStd.data = gStd.data, predRank.data = res.mar.raw$scoreRank)
load("~/Project/Drug_combination/WebApp/data/pathInfo.Rdata")
View(GP.mat)
save(CGP.mat, file = "Project/Drug_combination/WebApp/data/CGP.RData")
save(GP.mat, file = "Project/Drug_combination/WebApp/data/KEGG.GP.RData")
load("~/Project/Drug_combination/WebApp/data/marGeneNet.Rdata")
View(mGP.mat)
all(row.names(mGP.mat) == colnames(mGP.mat))
sum(mGP.mat == mGP.mat)
2259^2
dim(mGP.mat)
class(mGP.mat[1,])
class(mGP.mat[,1])
View(mGP.mat == mGP.mat)
2559^2
sum(mGP.mat == t(mGP.mat))
sum(mCGP.mat == t(mCGP.mat))
875^2
load("~/Project/Drug_combination/WebApp/data/gLassoGeneNet.Rdata")
sum(mCGP.mat == t(mCGP.mat))
sum(mGP.mat == t(mGP.mat))
load("~/Project/Drug_combination/WebApp/data/pathInfo.Rdata")
sum(GP.mat == t(GP.mat))
2709^2
setwd("~/Project/CD437CRISPR_Screen/Report")
sci.K562 <- read.table("Science_essentialCS.txt", sep = "\t", header = TRUE, stringsAsFactors = FALSE)
sci.K562 <- sci.K562[,c(1,5,6)]     # select K562
max.new <- read.table("ctx_demo_full_genetable_collapsed.new.txt", sep = "\t", stringsAsFactors = FALSE, header = TRUE)
max.new <- max.new[-(1:3), c(1,14,13)]    # select ave_gamma, delete neg_control
colnames(max.new) <- c("Gene", "ave_gamma", "p.value")
max.new <- max.new[!grepl("pseudo", max.new$Gene, fixed = TRUE),]
max.new$ave_gamma <- as.numeric(max.new$ave_gamma); max.new$p.value <- as.numeric(max.new$p.value)
setwd("~/Project/CD437CRISPR_Screen/Report/essentialGene/")
### 1. read and clean data
sci.K562 <- read.table("Science_essentialCS.txt", sep = "\t", header = TRUE, stringsAsFactors = FALSE)
sci.K562 <- sci.K562[,c(1,5,6)]     # select K562
max.new <- read.table("ctx_demo_full_genetable_collapsed.new.txt", sep = "\t", stringsAsFactors = FALSE, header = TRUE)
max.new <- max.new[-(1:3), c(1,14,13)]    # select ave_gamma, delete neg_control
colnames(max.new) <- c("Gene", "ave_gamma", "p.value")
max.new <- max.new[!grepl("pseudo", max.new$Gene, fixed = TRUE),]
max.new$ave_gamma <- as.numeric(max.new$ave_gamma); max.new$p.value <- as.numeric(max.new$p.value)
sci.K562 <- read.table("Science_essentialCS.txt", sep = "\t", header = TRUE, stringsAsFactors = FALSE)
sci.K562 <- sci.K562[,c(1,5,6)]     # select K562
nrow(sci.K562)
max.new <- read.table("ctx_demo_full_genetable_collapsed.new.txt", sep = "\t", stringsAsFactors = FALSE, header = TRUE)
max.new <- max.new[-(1:3), c(1,14,13)]    # select ave_gamma, delete neg_control
colnames(max.new) <- c("Gene", "ave_gamma", "p.value")
View(max.new)
nrow(max.new)
max.new <- max.new[!grepl("pseudo", max.new$Gene, fixed = TRUE),]
nrow(max.new)
max.new$ave_gamma <- as.numeric(max.new$ave_gamma); max.new$p.value <- as.numeric(max.new$p.value)
sum(max.new$Gene %in% sci.K562$Gene)
View(sci.K562)
sci.K562 <- cbind(sci.K562, as.numeric(K562.sig = sci.K562$K562.adjusted.p.value < 0.05))
sci.K562 <- cbind(sci.K562, K562.sig = as.numeric(sci.K562$K562.adjusted.p.value < 0.05))
View(sci.K562)
sum(sci.K562$K562.sig)
sum(sci.K562$K562.sig); sum(sci.K562$K562.sig[sci.K562$K562.CS <0])
View(max.new)
max.new <- cbind(max.new, hit.prob = 1 - max.new$p.value)
View(max.new)
sum(max.new$hit.prob > 0.95); sum(max.new$hit.prob[max.new$ave_gamma < 0] > 0.95)
max.new <- max.new[max.new$Gene %in% sci.K562$Gene,]
View(max.new)
sum(max.new$hit.prob > 0.95); sum(max.new$hit.prob[max.new$ave_gamma < 0] > 0.95)
install.packages("pROC")
library(pROC)
sci.K562 <- read.table("Science_essentialCS.txt", sep = "\t", header = TRUE, stringsAsFactors = FALSE)
sci.K562 <- sci.K562[,c(1,5,6)]     # select K562
nrow(sci.K562)    # num of genes: 18166
max.new <- read.table("ctx_demo_full_genetable_collapsed.new.txt", sep = "\t", stringsAsFactors = FALSE, header = TRUE)
max.new <- max.new[-(1:3), c(1,14,13)]    # select ave_gamma, delete neg_control
colnames(max.new) <- c("Gene", "ave_gamma", "p.value")
nrow(max.new)     # num of raw genes: 31954
max.new <- max.new[!grepl("pseudo", max.new$Gene, fixed = TRUE),]
nrow(max.new)     # num of real genes: 15977
max.new$ave_gamma <- as.numeric(max.new$ave_gamma); max.new$p.value <- as.numeric(max.new$p.value)
sum(max.new$Gene %in% sci.K562$Gene)      # num of overlap genes with sci.K562: 15596
### 2. Plot ROC
###############################
# set the sci.K562 p-value < 0.05 to be the true positive, and plot ROC
# exploratory analysis
sci.K562 <- cbind(sci.K562, K562.sig = as.numeric(sci.K562$K562.adjusted.p.value < 0.05))
sum(sci.K562$K562.sig); sum(sci.K562$K562.sig[sci.K562$K562.CS < 0])     # num of hits/positive hits: 2335/1663
max.new <- cbind(max.new, hit.prob = 1 - max.new$p.value)
sum(max.new$hit.prob > 0.95); sum(max.new$hit.prob[max.new$ave_gamma < 0] > 0.95)   # num of possible hits/negtive hits: 2362/1969
sci.K562 <- read.table("Science_essentialCS.txt", sep = "\t", header = TRUE, stringsAsFactors = FALSE)
sci.K562 <- sci.K562[,c(1,5,6)]     # select K562
nrow(sci.K562)    # num of genes: 18166
max.new <- read.table("ctx_demo_full_genetable_collapsed.new.txt", sep = "\t", stringsAsFactors = FALSE, header = TRUE)
max.new <- max.new[-(1:3), c(1,14,13)]    # select ave_gamma, delete neg_control
colnames(max.new) <- c("Gene", "ave_gamma", "p.value")
nrow(max.new)     # num of raw genes: 31954
max.new <- max.new[!grepl("pseudo", max.new$Gene, fixed = TRUE),]
nrow(max.new)     # num of real genes: 15977
max.new$ave_gamma <- as.numeric(max.new$ave_gamma); max.new$p.value <- as.numeric(max.new$p.value)
sum(max.new$Gene %in% sci.K562$Gene)      # num of overlap genes with sci.K562: 15596
### 2. Plot ROC
###############################
# set the sci.K562 p-value < 0.05 to be the true positive, and plot ROC
# exploratory analysis
sci.K562 <- cbind(sci.K562, K562.sig = as.numeric(sci.K562$K562.adjusted.p.value < 0.05))
sum(sci.K562$K562.sig); sum(sci.K562$K562.sig[sci.K562$K562.CS < 0])     # num of hits/positive hits: 2335/1663
max.new <- cbind(max.new, max.new.hit.prob = 1 - max.new$p.value)
sum(max.new$hit.prob > 0.95); sum(max.new$hit.prob[max.new$ave_gamma < 0] > 0.95)   # num of possible hits/negtive hits: 2362/1969
sum(max.new$max.new.hit.prob > 0.95); sum(max.new$max.new.hit.prob[max.new$ave_gamma < 0] > 0.95)   # num of possible hits/negtive hits: 2362/1969
names(sci.K562)
names(max.new)
pred.roc <- merge(sci.K562[,c("Gene", "K562.adjusted.p.value")], max.new[,c("Gene", "max.new.hit.prob")], by = "Gene")
View(pred.roc)
pred.roc <- merge(sci.K562[,c("Gene", "K562.sig")], max.new[,c("Gene", "max.new.hit.prob")], by = "Gene")
View(pred.roc)
plot.roc(pred.roc$K562.sig, pred.roc$max.new.hit.prob)
